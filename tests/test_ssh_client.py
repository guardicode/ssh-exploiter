from unittest.mock import MagicMock, patch

import paramiko
import pytest
from ssh_exploiter.ssh_client import SSHClient
from tests.propagation_credentials import FULL_CREDENTIALS

from common.types import NetworkPort
from infection_monkey.i_puppet import TargetHost

SSH_PORT = NetworkPort(22)
SSH_TIMEOUT = 10.0


@pytest.fixture
def mock_target_host():
    return TargetHost(ip="192.168.1.1")


def test_connect_with_private_key_successful(mock_target_host, monkeypatch):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )
    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.return_value = MagicMock()
        ssh_client.connect(mock_target_host, FULL_CREDENTIALS[6], SSH_PORT, SSH_TIMEOUT)

    assert mock_ssh_client.connect.called
    assert ssh_client.connected()


def test_connect_with_login_credentials_successful(mock_target_host, monkeypatch):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )
    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.side_effect = paramiko.PasswordRequiredException()
        ssh_client.connect(mock_target_host, FULL_CREDENTIALS[0], SSH_PORT, SSH_TIMEOUT)

    assert mock_ssh_client.connect.called
    assert ssh_client.connected()


@pytest.mark.parametrize(
    "error", [IOError, paramiko.SSHException, paramiko.PasswordRequiredException]
)
def test_connect_with_private_key_raises_exception(error, mock_target_host, monkeypatch):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )

    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.side_effect = error()
        with pytest.raises(Exception):
            ssh_client.connect(mock_target_host, FULL_CREDENTIALS[6], SSH_PORT, SSH_TIMEOUT)

    mock_ssh_client.connect.assert_not_called()
    assert not ssh_client.connected()


def test_connect_with_login_credentials_raises_exception(monkeypatch, mock_target_host):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )
    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.side_effect = paramiko.SSHException()
        with pytest.raises(Exception):
            ssh_client.connect(mock_target_host, FULL_CREDENTIALS[6], SSH_PORT, SSH_TIMEOUT)

    mock_ssh_client.connect.assert_not_called()
    assert not ssh_client.connected()


@pytest.mark.parametrize("error", [paramiko.AuthenticationException, Exception])
def test_connect_with_private_key_raises_exception__paramiko(monkeypatch, mock_target_host, error):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)
    mock_ssh_client.connect.side_effect = error()

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )
    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.return_value = MagicMock()
        with pytest.raises(Exception):
            ssh_client.connect(mock_target_host, FULL_CREDENTIALS[6], SSH_PORT, SSH_TIMEOUT)

    assert not ssh_client.connected()


@pytest.mark.parametrize("error", [paramiko.AuthenticationException, Exception])
def test_connect_with_login_credentials_raises_exception__paramiko(
    monkeypatch, mock_target_host, error
):
    ssh_client = SSHClient()
    mock_ssh_client = MagicMock(spec=paramiko.SSHClient)
    mock_ssh_client.connect.side_effect = error()

    monkeypatch.setattr(
        "ssh_exploiter.ssh_client.paramiko.SSHClient", lambda: mock_ssh_client
    )
    with patch("paramiko.RSAKey.from_private_key") as mock_from_private_key:
        mock_from_private_key.side_effect = paramiko.SSHException()
        with pytest.raises(Exception):
            ssh_client.connect(mock_target_host, FULL_CREDENTIALS[0], SSH_PORT, SSH_TIMEOUT)

    assert not ssh_client.connected()
    assert mock_ssh_client.close.called
