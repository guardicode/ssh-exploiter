import io
import logging
from pathlib import PurePath

import paramiko

from common.common_consts.timeouts import LONG_REQUEST_TIMEOUT, MEDIUM_REQUEST_TIMEOUT
from common.credentials import Credentials, Password, Username, get_plaintext
from common.types import NetworkPort
from infection_monkey.i_puppet import TargetHost

logger = logging.getLogger(__name__)

TRANSFER_UPDATE_RATE = 15
SSH_AUTH_TIMEOUT = LONG_REQUEST_TIMEOUT
SSH_BANNER_TIMEOUT = MEDIUM_REQUEST_TIMEOUT
SSH_EXEC_TIMEOUT = LONG_REQUEST_TIMEOUT
SSH_CHANNEL_TIMEOUT = MEDIUM_REQUEST_TIMEOUT


class SSHClient:
    def __init__(self):
        self._client = None
        self._authenticated = False

    def connect(
        self, host: TargetHost, credentials: Credentials, port: NetworkPort, timeout: float
    ):
        self._client = paramiko.SSHClient()
        self._client.set_missing_host_key_policy(paramiko.WarningPolicy())
        try:
            self._connect_with_private_key(host, credentials, port, timeout)
            logger.debug(f"Successfully authentiated using SSH on host: {host.ip}")
        except Exception:
            try:
                self._connect_with_login_credentials(host, credentials, port, timeout)
            except Exception as err:
                self._client.close()
                raise err

        self._authenticated = True

    def _connect_with_private_key(
        self, host: TargetHost, credentials: Credentials, port: NetworkPort, timeout: float
    ):
        username = (
            credentials.identity.username
            if isinstance(credentials.identity, Username)
            else credentials.identity
        )

        try:
            private_key = io.StringIO(get_plaintext(credentials.secret.private_key))
            private_key = paramiko.RSAKey.from_private_key(private_key)
        except (IOError, paramiko.SSHException, paramiko.PasswordRequiredException) as err:
            logger.error("Failed reading ssh key")
            raise err

        try:
            self._client.connect(
                str(host.ip),
                username=username,
                pkey=private_key,
                port=int(port),
                timeout=timeout,
                auth_timeout=SSH_AUTH_TIMEOUT,
                banner_timeout=SSH_BANNER_TIMEOUT,
                channel_timeout=SSH_CHANNEL_TIMEOUT,
                allow_agent=False,
            )
            logger.debug(
                f"Successfully logged in {host.ip} using {username}@{host.ip} user's private key"
            )
        except paramiko.AuthenticationException as err:
            error_message = (
                f"Failed logging into victim {host.ip} with {username}@{host.ip}"
                f"private key: {err}"
            )
            logger.info(error_message)
            raise err
        except Exception as err:
            error_message = (
                f"Unexpected error while attempting to login to {username}@{host.ip} with ssh key: "
                f"{err}"
            )
            logger.error(error_message)
            raise err

    def _connect_with_login_credentials(
        self, host: TargetHost, credentials: Credentials, port: NetworkPort, timeout: float
    ):
        username = (
            credentials.identity.username
            if isinstance(credentials.identity, Username)
            else credentials.identity
        )

        if not isinstance(credentials.secret, Password):
            raise Exception(f"No suitable credentials found for SSH login on host: {host.ip}")

        try:
            self._client.connect(
                str(host.ip),
                username=username,
                password=get_plaintext(credentials.secret.password),
                port=int(port),
                timeout=timeout,
                auth_timeout=SSH_AUTH_TIMEOUT,
                banner_timeout=SSH_BANNER_TIMEOUT,
                channel_timeout=SSH_CHANNEL_TIMEOUT,
                allow_agent=False,
            )
            logger.debug(f"Successfully logged in {host.ip}, User: {username}")
        except paramiko.AuthenticationException as err:
            error_message = f"Failed logging into victim {host.ip} with user: {username}: {err}"
            raise err
        except Exception as err:
            error_message = (
                f"Unexpected error while attempting to login to {host.ip} with password: " f"{err}"
            )
            logger.debug(error_message)
            raise err

    def copy_file(
        self,
        binary_file_object: io.BytesIO,
        destination_path: PurePath,
    ):
        try:
            with self._client.open_sftp() as sftp:
                sftp.putfo(
                    binary_file_object,
                    str(destination_path),
                    file_size=len(binary_file_object.getbuffer()),
                    callback=self._log_transfer,
                )
                sftp.chmod(str(destination_path), 0o700)
        except Exception as err:
            error_message = f"Error uploading file: ({err})"
            logger.error(error_message)
            raise err

    def _log_transfer(self, transferred: int, total: int):
        logger.debug(f"SFTP transferred: {transferred} bytes, total: {total} bytes")

    def execute_command(self, command: str) -> bytes:
        _, stdout, _ = self._client.exec_command(command, timeout=SSH_EXEC_TIMEOUT)
        return stdout

    def connected(self) -> bool:
        return self._authenticated
