import logging
from pathlib import PurePath
from typing import Callable, Collection, Set, Type

from common import OperatingSystem
from common.credentials import Credentials
from common.types import NetworkPort
from infection_monkey.exploit.tools import (
    IRemoteAccessClient,
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

from .ssh_client import SSHClient
from .ssh_options import SSHOptions

logger = logging.getLogger(__name__)
LOGIN_TAGS = {}
COPY_FILE_TAGS = {}
EXECUTION_TAGS = {}

SSH_PORTS = [NetworkPort(22)]


class SSHRemoteAccessClient(IRemoteAccessClient):
    def __init__(
        self,
        host: TargetHost,
        options: SSHOptions,
        command_builder: Callable[[PurePath], str],
        ssh_client: SSHClient,
    ):
        self._host = host
        self._options = options
        self._command_builder = command_builder
        self._ssh_client = ssh_client

    def login(self, credentials: Credentials, tags: Set[str]):
        tags.update(LOGIN_TAGS)

        try:
            for port in SSH_PORTS:
                self._ssh_client.connect(
                    self._host, credentials, port, timeout=self._options.connect_timeout
                )
        except Exception as err:
            error_message = f"Failed to authenticate over SSH with {credentials}: {err}"
            raise RemoteAuthenticationError(error_message)

    def _raise_if_not_authenticated(self, error_type: Type[Exception]):
        if not self._ssh_client.connected():
            raise error_type(
                "This operation cannot be performed until authentication is successful"
            )

    def get_os(self) -> OperatingSystem:
        return OperatingSystem.LINUX

    def execute_agent(self, agent_binary_path: PurePath, tags: Set[str]):
        self._raise_if_not_authenticated(RemoteCommandExecutionError)
        try:
            tags.update(EXECUTION_TAGS)
            self._ssh_client.execute_command(self._command_builder(agent_binary_path))
        except Exception as err:
            raise RemoteCommandExecutionError(err)

    def copy_file(self, file: bytes, destination_path: PurePath, tags: Set[str]):
        self._raise_if_not_authenticated(RemoteFileCopyError)

        logger.debug(
            f"Trying to copy monkey file to [{destination_path}] on victim {self._host.ip}"
        )

        try:
            logger.info(f"Attempting to copy the monkey agent binary to {self._host.ip}")
            self._ssh_client.copy_file(file, destination_path)
            tags.update(COPY_FILE_TAGS)
        except Exception as err:
            raise RemoteFileCopyError(f"Failed to copy the agent binary to the victim: {err}")

    def get_writable_paths(self) -> Collection[PurePath]:
        return []
